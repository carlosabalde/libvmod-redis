varnishtest "Tests handling of ASK reply messages"

server s1 {
   rxreq
   txresp
} -repeat 1 -start

varnish v1 -arg "-p vsl_reclen=1024" -vcl+backend {
    import redis from "${vmod_topbuild}/src/.libs/libvmod_redis.so";

    sub vcl_init {
        redis.subnets(
            masks={""});

        redis.sentinels(
            locations={""},
            period=0,
            connection_timeout=500,
            command_timeout=0);

        new db = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=cluster,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=true,
            max_connections=32,
            password="",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=16);
        db.add_server("${redis_master2_ip}:${redis_master2_port}", cluster);
        db.add_server("${redis_master3_ip}:${redis_master3_port}", cluster);

        new master1 = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=1,
            password="",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);
        new master2 = redis.db(
            location="${redis_master2_ip}:${redis_master2_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=1,
            password="",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);
    }

    sub vcl_deliver {
        # Set key in master1.
        db.command("SET");
        db.push("${redis_key_in_master1}");
        db.push("hello");
        db.execute(true);
        if (db.reply_is_status()) {
            set resp.http.Reply-1 = db.get_status_reply();
        }

        # Migrate key from master1 to master2.
        call migrate;

        # Get the key (should internally handle the ASK redirection).
        db.command("GET");
        db.push("${redis_key_in_master1}");
        db.execute(true);
        if (db.reply_is_string()) {
            set resp.http.Reply-2 = db.get_string_reply();
        }

        # Stats.
        set resp.http.db-stats = db.stats();
        set resp.http.db-servers-total = db.counter("servers.total");
        set resp.http.db-connections-total = db.counter("connections.total");
        set resp.http.db-commands-total = db.counter("commands.total");
        set resp.http.db-cluster-discoveries-total = db.counter("cluster.discoveries.total");
        set resp.http.db-cluster-replies-moved = db.counter("cluster.replies.moved");
        set resp.http.db-cluster-replies-ask = db.counter("cluster.replies.ask");
    }

    sub migrate {
        # Get the key's containing slot.
        master1.command("CLUSTER");
        master1.push("KEYSLOT");
        master1.push("${redis_key_in_master1}");
        master1.execute(true);
        if (master1.reply_is_integer()) {
            set resp.http.Migration-Slot = master1.get_integer_reply();
        }

        # Get the ID for the original node (master1).
        master1.command("CLUSTER");
        master1.push("NODES");
        master1.execute(true);
        if (master1.reply_is_string()) {
            set resp.http.Migration-NodeOrig = regsub(master1.get_reply(), "(?s)^(?:.+\n)?([0-9a-f]+) ${redis_master1_ip}:${redis_master1_port}(?:@\d+)? .*$", "\1");
            if (resp.http.Migration-NodeOrig !~ "[0-9a-f]+") {
                unset resp.http.Migration-NodeOrig;
            }
        }

        # Get the ID for the destination node (master2).
        master1.command("CLUSTER");
        master1.push("NODES");
        master1.execute(true);
        if (master1.reply_is_string()) {
            set resp.http.Migration-NodeDest = regsub(master1.get_reply(), "(?s)^(?:.+\n)?([0-9a-f]+) ${redis_master2_ip}:${redis_master2_port}(?:@\d+)? .*$", "\1");
            if (resp.http.Migration-NodeDest !~ "[0-9a-f]+") {
                unset resp.http.Migration-NodeDest;
            }
        }

        # Mark the destination node as IMPORTING.
        master2.command("CLUSTER");
        master2.push("SETSLOT");
        master2.push(resp.http.Migration-Slot);
        master2.push("IMPORTING");
        master2.push(resp.http.Migration-NodeOrig);
        master2.execute(true);
        if (master2.reply_is_status()) {
            set resp.http.Migration-Reply-4 = master2.get_status_reply();
        }

        # Mark the original node as MIGRATING.
        master1.command("CLUSTER");
        master1.push("SETSLOT");
        master1.push(resp.http.Migration-Slot);
        master1.push("MIGRATING");
        master1.push(resp.http.Migration-NodeDest);
        master1.execute(true);
        if (master1.reply_is_status()) {
            set resp.http.Migration-Reply-5 = master1.get_status_reply();
        }

        # Migrate key.
        master1.command("MIGRATE");
        master1.push("${redis_master2_ip}");
        master1.push("${redis_master2_port}");
        master1.push("${redis_key_in_master1}");
        master1.push("0");
        master1.push("0");
        master1.execute(true);
        if (master1.reply_is_status()) {
            set resp.http.Migration-Reply-6 = master1.get_status_reply();
        }

        # Check that the original node replies with an ASK redirection.
        master1.command("GET");
        master1.push("${redis_key_in_master1}");
        master1.execute(true);
        if (master1.reply_is_error()) {
            if (master1.get_error_reply() ~ "^ASK ") {
                set resp.http.Migration-Reply-7 = "ASK";
            }
        }
    }
} -start

client c1 {
    txreq
    rxresp

    expect resp.http.Reply-1 == "OK"

    expect resp.http.Migration-Slot != <undef>
    expect resp.http.Migration-NodeOrig != <undef>
    expect resp.http.Migration-NodeDest != <undef>
    expect resp.http.Migration-Reply-4 == "OK"
    expect resp.http.Migration-Reply-5 == "OK"
    expect resp.http.Migration-Reply-6 == "OK"
    expect resp.http.Migration-Reply-7 == "ASK"

    expect resp.http.Reply-2 == "hello"

    expect resp.http.db-servers-total == "9"
    expect resp.http.db-connections-total == "2"
    expect resp.http.db-commands-total == "3"
    expect resp.http.db-cluster-discoveries-total == "1"
    expect resp.http.db-cluster-replies-moved == "0"
    expect resp.http.db-cluster-replies-ask == "1"
} -run

varnish v1 -expect client_req == 1
