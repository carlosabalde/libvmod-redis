varnishtest "Tests Sentinels."

server s1 {
   rxreq
   txresp
} -repeat 1 -start

# Let Sentinels discover all master and slave servers.
delay 15

varnish v1 -vcl+backend {
    import ${vmod_redis};

    sub vcl_init {
        redis.subnets(
            masks={""});

        redis.sentinels(
            locations={"
                ${redis_sentinel1_ip}:${redis_sentinel1_port},
                ${redis_sentinel2_ip}:${redis_sentinel2_port},
                ${redis_sentinel3_ip}:${redis_sentinel3_port}
            "},
            period=3,
            connection_timeout=500,
            command_timeout=0);

        new db = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=auto,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=2,
            password="",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);
        db.add_server("${redis_slave1_1_ip}:${redis_slave1_1_port}", auto);
        db.add_server("${redis_slave1_2_ip}:${redis_slave1_2_port}", auto);
    }

    sub vcl_deliver {
        # Simulate unreachable master.
        db.command("DEBUG");
        db.push("sleep");
        db.push("20");
        db.execute(true);

        # Stats.
        set resp.http.db-stats = db.stats();
    }
} -start

delay 1

client c1 {
    txreq
    rxresp
} -run

delay 20

# XXX: not really an useful test at the moment.

varnish v1 -expect client_req == 1
