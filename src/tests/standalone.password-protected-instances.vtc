varnishtest "Tests password protected instances"

server s1 {
   rxreq
   txresp
} -repeat 3 -start

varnish v1 -arg "-p vsl_reclen=1024" -vcl+backend {
    import redis from "${vmod_topbuild}/src/.libs/libvmod_redis.so";

    sub vcl_init {
        redis.subnets(
            masks={""});

        redis.sentinels(
            locations={""},
            period=0,
            connection_timeout=500,
            command_timeout=0);

        new db = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=1,
            password="",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);
    }

    sub vcl_deliver {
        # SET.
        db.command("SET");
        db.push("foo");
        db.push("hello");
        db.execute(true);
        if (db.reply_is_status()) {
            set resp.http.Reply-1 = db.get_status_reply();
        }

        # CONFIG SET.
        db.command("CONFIG");
        db.push("SET");
        db.push("requirepass");
        db.push("s3cr3t");
        db.execute(true);
        if (db.reply_is_status()) {
            set resp.http.Reply-2 = db.get_status_reply();
        }
    }
} -start

varnish v2 -arg "-p vsl_reclen=1024" -vcl+backend {
    import redis from "${vmod_topbuild}/src/.libs/libvmod_redis.so";

    sub vcl_init {
        redis.subnets(
            masks={""});

        redis.sentinels(
            locations={""},
            period=0,
            connection_timeout=500,
            command_timeout=0);

        new db1 = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=3,
            password="",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);

        new db2 = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=3,
            password="42",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);

        new db3 = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=3,
            password="s3cr3t",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);
    }

    sub vcl_deliver {
        # GET (no password).
        db1.command("GET");
        db1.push("foo");
        db1.execute(true);
        if (db1.reply_is_error() &&
            (db1.get_error_reply() ~ "NOAUTH")) {
            set resp.http.Reply-1 = "o/";
        }

        # GET (wrong password).
        db2.command("GET");
        db2.push("foo");
        db2.execute(true);
        if (!db2.replied()) {
            set resp.http.Reply-2 = "o/";
        }

        # GET (right password).
        db3.command("GET");
        db3.push("foo");
        db3.execute(true);
        if (db3.reply_is_string()) {
            set resp.http.Reply-3 = db3.get_string_reply();
        }

        # ACL.
        if (${redis_version} >= 6000000) {
            db3.command("ACL");
            db3.push("SETUSER");
            db3.push("alice");
            db3.push("on");
            db3.push(">t0ps3cr3t");
            db3.push("~foo*");
            db3.push("+get");
            db3.execute(true);
            if (db3.reply_is_status()) {
                set resp.http.Reply-4 = db3.get_status_reply();
            }
        } else {
            set resp.http.Reply-4 = "OK";
        }
    }
} -start

varnish v3 -arg "-p vsl_reclen=1024" -vcl+backend {
    import redis from "${vmod_topbuild}/src/.libs/libvmod_redis.so";

    sub vcl_init {
        redis.subnets(
            masks={""});

        redis.sentinels(
            locations={""},
            period=0,
            connection_timeout=500,
            command_timeout=0);

        new db1 = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=3,
            user="alice",
            password="",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);

        new db2 = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=3,
            user="alice",
            password="s3cr3t",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);

        new db3 = redis.db(
            location="${redis_master1_ip}:${redis_master1_port}",
            type=master,
            connection_timeout=500,
            connection_ttl=0,
            command_timeout=0,
            max_command_retries=0,
            shared_connections=false,
            max_connections=3,
            user="alice",
            password="t0ps3cr3t",
            sickness_ttl=0,
            ignore_slaves=false,
            max_cluster_hops=0);
    }

    sub vcl_deliver {
        # GET (no password).
        if (${redis_version} >= 6000000) {
            db1.command("GET");
            db1.push("foo");
            db1.execute(true);
            if (db1.reply_is_error() && (db1.get_error_reply() ~ "NOAUTH")) {
                set resp.http.Reply-1 = "o/";
            }
        } else {
            set resp.http.Reply-1 = "o/";
        }

        # GET (wrong password).
        if (${redis_version} >= 6000000) {
            db2.command("GET");
            db2.push("foo");
            db2.execute(true);
            if (!db2.replied()) {
                set resp.http.Reply-2 = "o/";
            }
        } else {
            set resp.http.Reply-2 = "o/";
        }

        # GET (right password).
        if (${redis_version} >= 6000000) {
            db3.command("GET");
            db3.push("foo");
            db3.execute(true);
            if (db3.reply_is_string()) {
                set resp.http.Reply-3 = db3.get_string_reply();
            }
        } else {
            set resp.http.Reply-3 = "hello";
        }

        # GET (right password but no permissions).
        if (${redis_version} >= 6000000) {
            db3.command("GET");
            db3.push("bar");
            db3.execute(true);
            if (db3.reply_is_error() &&
                (db3.get_error_reply() ~ "NOPERM")) {
                set resp.http.Reply-4 = "o/";
            }
        } else {
            set resp.http.Reply-4 = "o/";
        }
    }
} -start

client c1 {
    txreq
    rxresp

    expect resp.http.Reply-1 == "OK"

    expect resp.http.Reply-2 == "OK"
} -run

client c2 -connect ${v2_sock} {
    txreq
    rxresp

    expect resp.http.Reply-1 == "o/"

    expect resp.http.Reply-2 == "o/"

    expect resp.http.Reply-3 == "hello"

    expect resp.http.Reply-4 == "OK"
} -run

client c3 -connect ${v3_sock} {
    txreq
    rxresp

    expect resp.http.Reply-1 == "o/"

    expect resp.http.Reply-2 == "o/"

    expect resp.http.Reply-3 == "hello"

    expect resp.http.Reply-4 == "o/"
} -run

varnish v1 -expect client_req == 1
varnish v2 -expect client_req == 1
varnish v3 -expect client_req == 1
