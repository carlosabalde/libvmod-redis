#
# Copyright (c) 2014-2016 Carlos Abalde <carlos.abalde@gmail.com>
#
# You're free to use and distribute this under terms in the
# LICENSE file.
#

$Module redis 3 Redis VMOD

DESCRIPTION
===========

VMOD using the synchronous hiredis library API to access Redis servers from VCL.

$Init init_function
$Object db(STRING, INT, INT, INT, INT, BOOL, INT, STRING, BOOL, INT)

Arguments
    location: Redis connection string. Both host + port and UNIX sockets are
    supported. Only host + port format is allowed when Redis Cluster support
    is enabled.

    connection_timeout: connection timeout (milliseconds; 0 means no timeout)
    to the Redis server.

    connection_ttl: TTL (seconds) of Redis connections (0 means no TTL). Once
    the TTL of a connection is consumed, the module transparently reestablishes
    it. See "Client timeouts" in http://redis.io/topics/clients for extra
    information.

    command_timeout: command timeout (milliseconds; 0 means no timeout) when
    executing a Redis command. It can be overridden during command execution
    with ``.timeout()``.

    max_command_retries: number of retries to be executed after a failed command
    execution. It can be overridden during command execution with
    ``.retries()``.

    shared_connections: if enabled, Redis connections are not local to Varnish
    worker threads, but shared by all threads using one or more pools.

    max_connections:
        When ``shared_connections`` is enabled, the VMOD creates one pool of
        Redis connections per location and database instance. This option sets
        the maximum number of connections in each pool. All Varnish worker
        threads using the same database instance will share connections in these
        pools. Pools are not shared between database instances.

        Note that when Redis Cluster support is enabled for a database, each
        server is the cluster is internally labeled by the VMOD with its
        location (host + port).

        When ``shared_connections`` is disabled, Redis connections are local to
        each Varnish worker thread. This option sets the maximum number of Redis
        connections per Varnish worker thread. Each thread keeps up to one
        connection per location and database instance. If more than one (database,
        location) pair is available, incrementing this limit allows recycling of
        Redis connections.

        WARNING: when creating multiple database instances, always use the same
        value in all instances using private contexts. Otherwise you may
        experience inconsistent behavior.

    password: if not empty, requests for authentication using the ``AUTH``
    command will be submitted when creating new Redis connections. This argument
    is ignored when Redis Cluster support is enabled.

    clustered: enables the Redis Cluster support, automatically discovering
    other servers in the cluster using the command ``CLUSTER SLOTS``.

    max_cluster_hops: maximum number of redirections (0 means no limit) when
    executing a command and Redis Cluster support has been enabled.
Description
    Creates a new database instance.

$Method VOID .add_server(STRING)

Arguments
    location: Redis connection string. Both host + port and UNIX sockets are
    supported. If Redis Cluster support has been enabled only host + port
    format is allowed.
Description
    Adds an extra Redis server.

    When a command is submitted using ``.execute()`` and more than one Redis
    server is available, the destination server is randomly selected. A
    randomly selected connection will be used (if the worker thread /
    corresponding pool already has any Redis connection established and
    available), or a new connection to a randomly selected server will be
    established.

    If Redis Cluster support has been enabled other servers in the cluster are
    automatically discovered by the VMOD using the ``CLUSTER SLOTS`` command.
    Anyway, knowing more cluster servers during startup increases the chances
    of discover the cluster topology if some server is failing.

$Method VOID .command(STRING)

Arguments
    name: name of the Redis command to be executed.
Description
    Enqueues a Redis command (only the name of the command) for further
    execution. Arguments should be enqueued separately calling one or more times
    to the ``.push()`` method.

    On execution time, ``EVAL`` commands are internally replace by ``EVALSHA``
    commands, which fallback to the original ``EVAL`` command if the Redis
    server returns a ``NOSCRIPT`` error (see http://redis.io/commands/eval).

$Method VOID .timeout(INT)

Arguments
    command_timeout: command timeout (milliseconds; 0 means no timeout) to be
    used when executing a specific Redis command.
Description
    Allows overriding the default command timeout provided when calling
    ``redis.db()``.

$Method VOID .retries(INT)

Arguments
    max_command_retries: number of retries to be executed after a failed command
    execution.
Description
    Allows overriding the default number of retries provided when calling
    ``redis.db()``.

$Method VOID .push(STRING)

Arguments
    name: argument of a previously enqueued Redis command.
Description
    Provides an argument to a previously enqueued Redis command.

$Method VOID .execute()

Return value
    VOID
Description
    Executes a previously enqueued Redis command.

$Method BOOL .replied()

Return value
    TRUE if a previously executed Redis command using ``.execute()`` returned
    any reply. Not returning a reply usually means a failed connection, a
    connection timeout, etc.

$Method BOOL .reply_is_error()

Return value
    TRUE if a previously executed Redis command using ``.execute()`` returned
    an error reply.

$Method BOOL .reply_is_nil()

Return value
    TRUE if a previously executed Redis command using ``.execute()`` returned a
    nil reply.

$Method BOOL .reply_is_status()

Return value
    TRUE if a previously executed Redis command using ``.execute()`` returned a
    status reply.

$Method BOOL .reply_is_integer()

Return value
    TRUE if a previously executed Redis command ``.execute()`` returned an
    integer reply.

$Method BOOL .reply_is_string()

Return value
    TRUE if a previously executed Redis command ``.execute()`` returned a
    string reply.

$Method BOOL .reply_is_array()

Return value
    TRUE if a previously executed Redis command using ``.execute()`` returned
    an array reply.

$Method STRING .get_reply()

Return value
    A string representation of the reply of a previously executed Redis command
    using ``.execute()``.
Description
    Do not use this function to access to array replies.

$Method STRING .get_error_reply()

Return value
    If a previously executed Redis command using ``.execute()`` returned an
    error reply, this function returns a string representation of that reply.

$Method STRING .get_status_reply()

Return value
    If a previously executed Redis command using ``.execute()`` returned a
    status reply, this function returns a string representation of that reply.

$Method INT .get_integer_reply()

Return value
    If a previously executed Redis command using ``.execute()`` returned
    an integer reply, this function returns an integer representation of that
    reply.

$Method STRING .get_string_reply()

Return value
    If a previously executed Redis command using ``.execute()`` returned a
    string reply, this function returns a string representation of that reply.

$Method INT .get_array_reply_length()

Return value
    If a previously executed Redis command using ``.execute()`` returned
    an array reply, this function returns the number of elements in that reply.

$Method BOOL .array_reply_is_error(INT)

Return value
    If a previously executed Redis command using ``.execute()`` returned
    an array reply, this function returns TRUE if the nth element in that reply
    is an error reply (nested arrays are not supported).

$Method BOOL .array_reply_is_nil(INT)

Return value
    If a previously executed Redis command using ``.execute()`` returned an
    array reply, this function returns TRUE if the nth element in that reply is
    a nil reply (nested arrays are not supported).

$Method BOOL .array_reply_is_status(INT)

Return value
    If a previously executed Redis command using ``.execute()`` returned an
    array reply, this function returns TRUE if the nth element in that reply is
    a nil reply (nested arrays are not supported).

$Method BOOL .array_reply_is_integer(INT)

Return value
    If a previously executed Redis command using ``.execute()`` returned an
    array reply, this function returns TRUE if the nth element in that reply is
    an integer reply (nested arrays are not supported).

$Method BOOL .array_reply_is_string(INT)

Return value
    If a previously executed Redis command using ``.execute()`` returned an
    array reply, this function returns TRUE if the nth element in that reply is
    a string reply (nested arrays are not supported).

$Method BOOL .array_reply_is_array(INT)

Return value
    If a previously executed Redis command using ``.execute()`` returned an
    array reply, this function returns TRUE if the nth element in that reply is
    an array reply (nested arrays are not supported).

$Method STRING .get_array_reply_value(INT)

Return value
    If a previously executed Redis command using ``.execute()`` returned an
    array reply, this function returns a string representation of the nth element
    in that reply (nested arrays are not supported).

$Method VOID .free()

Description
    Frees memory internally used by Redis commands an replies. It's recommended to
    use this function, but if not called this will be handled automatically during
    the next call to ``.command()`` using the same object.

$Method STRING .stats()

Description
    Returns internal stats represented as a JSON string.

$Method INT .counter(STRING)

Description
    Returns internal counter.
